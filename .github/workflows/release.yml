name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-20.04
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install cross-compilation tools (for aarch64 on x86_64)
      if: runner.os == 'Linux' && matrix.arch == 'aarch64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
      shell: bash

    - name: Build binary
      run: |
        if [ "${{ runner.os }}" == "Linux" ] && [ "${{ matrix.arch }}" == "aarch64" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target=${{ matrix.target }}
      shell: bash

    - name: Package artifacts
      shell: bash
      run: |
        set -x
        RELEASE_VERSION=${{ github.ref_name }}
        OS_NAME=$(echo ${{ matrix.os }} | cut -d- -f1) # ubuntu -> ubuntu, macos -> macos, windows -> windows
        if [ "$OS_NAME" == "ubuntu" ]; then OS_NAME="linux"; fi

        ARTIFACT_DIR_NAME="mssh-${RELEASE_VERSION}-${OS_NAME}-${{ matrix.arch }}"
        mkdir -p $ARTIFACT_DIR_NAME

        BINARY_EXT=""
        if [ "${{ runner.os }}" == "Windows" ]; then
            BINARY_EXT=".exe"
        fi
        
        cp "target/${{ matrix.target }}/release/mssh${BINARY_EXT}" "${ARTIFACT_DIR_NAME}/mssh${BINARY_EXT}"
        
        if [ "${{ runner.os }}" == "Windows" ]; then
            7z a "${ARTIFACT_DIR_NAME}.zip" "./${ARTIFACT_DIR_NAME}"
            echo "ASSET_NAME=${ARTIFACT_DIR_NAME}.zip" >> $GITHUB_ENV
        else
            tar -czf "${ARTIFACT_DIR_NAME}.tar.gz" "./${ARTIFACT_DIR_NAME}"
            echo "ASSET_NAME=${ARTIFACT_DIR_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload artifact for release
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ASSET_NAME }}
        path: ${{ env.ASSET_NAME }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
          body: "Automated release for ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
