name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            arch: x86_64
          - os: ubuntu-20.04
            arch: aarch64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: aarch64
          - os: windows-latest
            arch: x86_64
          - os: windows-latest
            arch: aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.arch }}-unknown-linux-gnu # This will be ignored on non-linux platforms but is required
        override: true

    - name: Install cross-compilation tools (for aarch64 on x86_64)
      if: runner.arch == 'x64' && matrix.arch == 'aarch64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
      shell: bash

    - name: Build binary
      run: |
        if [ "${{ runner.os }}" == "Linux" ] && [ "${{ matrix.arch }}" == "aarch64" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            cargo build --release --target=aarch64-unknown-linux-gnu
        elif [ "${{ runner.os }}" == "macOS" ]; then
             if [ "${{ matrix.arch }}" == "aarch64" ]; then
                cargo build --release --target=aarch64-apple-darwin
             else
                cargo build --release --target=x86_64-apple-darwin
             fi
        elif [ "${{ runner.os }}" == "Windows" ]; then
             if [ "${{ matrix.arch }}" == "aarch64" ]; then
                cargo build --release --target=aarch64-pc-windows-msvc
             else
                cargo build --release --target=x86_64-pc-windows-msvc
             fi
        else
            cargo build --release
        fi
      shell: bash

    - name: Package artifacts
      shell: bash
      run: |
        set -x
        RELEASE_VERSION=${{ github.ref_name }}
        OS_NAME=$(echo ${{ matrix.os }} | cut -d- -f1) # ubuntu -> ubuntu, macos -> macos, windows -> windows
        if [ "$OS_NAME" == "ubuntu" ]; then OS_NAME="linux"; fi

        ARTIFACT_DIR_NAME="mssh-${RELEASE_VERSION}-${OS_NAME}-${{ matrix.arch }}"
        mkdir -p $ARTIFACT_DIR_NAME

        if [ "${{ runner.os }}" == "Windows" ]; then
            BINARY_PATH="target/${{ matrix.arch }}-pc-windows-msvc/release/mssh.exe"
            cp "$BINARY_PATH" "${ARTIFACT_DIR_NAME}/mssh.exe"
            7z a "${ARTIFACT_DIR_NAME}.zip" "./${ARTIFACT_DIR_NAME}"
            echo "ASSET_NAME=${ARTIFACT_DIR_NAME}.zip" >> $GITHUB_ENV
        else
            if [ "${{ runner.os }}" == "Linux" ]; then
              BINARY_PATH="target/aarch64-unknown-linux-gnu/release/mssh"
            elif [ "${{ runner.os }}" == "macOS" ] && [ "${{ matrix.arch }}" == "aarch64" ]; then
              BINARY_PATH="target/aarch64-apple-darwin/release/mssh"
            elif [ "${{ runner.os }}" == "macOS" ] && [ "${{ matrix.arch }}" == "x86_64" ]; then
              BINARY_PATH="target/x86_64-apple-darwin/release/mssh"
            else
              BINARY_PATH="target/release/mssh"
            fi
            cp "$BINARY_PATH" "${ARTIFACT_DIR_NAME}/mssh"
            tar -czf "${ARTIFACT_DIR_NAME}.tar.gz" "./${ARTIFACT_DIR_NAME}"
            echo "ASSET_NAME=${ARTIFACT_DIR_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload artifact for release
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ASSET_NAME }}
        path: ${{ env.ASSET_NAME }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
          body: "Automated release for ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
